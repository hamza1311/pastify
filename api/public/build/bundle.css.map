{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../frontend/App.svelte",
    "../../../frontend/Home.svelte",
    "../../../frontend/Navbar.svelte",
    "../../../frontend/ShowPaste.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { Router, Link, Route } from \"svelte-routing\";\n    import Home from \"./components/Home.svelte\";\n    import ShowPaste from \"./components/ShowPaste.svelte\";\n\n    export let url = \"\";\n</script>\n\n<style type=\"text/scss\">:global(body) {\n  color: #d7d7d7;\n  background: #0b0b0b;\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale; }\n\n:global(*) {\n  margin: 0;\n  padding: 0; }\n\n:global(.navbar) {\n  display: flex; }\n  :global(.navbar) :global(.buttons) {\n    display: flex;\n    gap: 1rem;\n    align-self: center;\n    margin-right: 1rem; }\n  :global(.navbar) :global(.separator) {\n    flex: 1 1 auto; }\n  :global(.navbar) :global(.button) {\n    background: transparent;\n    /*box-shadow: 0 0 0 1.5pt #226699;*/\n    color: #d7d7d7;\n    font-size: 1rem;\n    border: 3px solid #226699;\n    border-radius: 5pt;\n    padding: 0.3em 1em 0.3em 1em;\n    width: 100%;\n    height: 70%; }\n\n/*# sourceMappingURL=App.svelte.css.map */</style>\n\n<Router url=\"{url}\">\n    <div>\n        <Route path=\"/show/:id\" component=\"{ShowPaste}\"/>\n        <Route path=\"/\">\n            <Home/>\n        </Route>\n    </div>\n</Router>\n",
    "<script>\n    import Navbar from \"./Navbar.svelte\";\n    import { navigate } from \"svelte-routing\";\n\n    let content = 'content'\n\n    const save = async (content) => {\n        const resp = await fetch('/api', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ content: content })\n        });\n\n        const json = await resp.json()\n        navigate(`/show/${json.id}`, { replace: true })\n\n    }\n\n    const reset = () => {\n        content = '';\n    }\n\n</script>\n\n<style type=\"text/scss\">.home {\n  display: flex;\n  flex-direction: column; }\n  .home .paste-input {\n    background-color: #121212;\n    font-family: 'JetBrainsMono', monospace;\n    color: white;\n    height: 90vh;\n    padding: 0.5em;\n    border: none; }\n\n/*# sourceMappingURL=Home.svelte.css.map */</style>\n\n<main class=\"home\">\n    <nav class=\"navbar\">\n        <Navbar/>\n        <span class=\"separator\"></span>\n        <div class=\"buttons\">\n            <button class=\"button\" on:click=\"{save(content)}\">Save</button>\n            <button class=\"button\" on:click=\"{reset()}\">Reset</button>\n        </div>\n    </nav>\n\n    <textarea\n            class=\"paste-input\"\n            spellcheck=\"false\"\n            bind:value={content}\n    ></textarea>\n</main>\n",
    "<script>\n    import { navigate } from \"svelte-routing\"\n</script>\n\n<style type=\"text/scss\">nav {\n  display: flex;\n  align-items: center;\n  margin: 0.5rem; }\n  nav .logo {\n    width: 2em;\n    height: 2em;\n    vertical-align: middle; }\n  nav .title {\n    margin-left: 0.5rem;\n    font-size: 1.6em;\n    font-weight: bold;\n    vertical-align: middle; }\n\n/*# sourceMappingURL=Navbar.svelte.css.map */</style>\n\n<nav on:click={() => navigate(\"/\")}>\n    <img\n            class=\"logo\"\n            alt=\"Logo\"\n            src=\"/icon.svg\"\n    />\n    <h1 class=\"title\">Pastify</h1>\n</nav>\n",
    "<!--suppress HtmlUnknownTarget -->\n<svelte:head>\n    <script src='/prism/prism.js'></script>\n    <link rel='stylesheet' href='/prism/prism.css'>\n</svelte:head>\n\n<script>\n    import NavBar from './Navbar.svelte'\n    import {onMount} from \"svelte\";\n\n    let content = ''\n\n    export let id;\n    let isHighlighted = false\n\n    onMount(async () => {\n        const split = id.split('.')\n        const lang = split[1]\n\n        const resp = await fetch(`/api/${split[0]}`)\n        const data = await resp.json()\n\n        let config = []\n        switch (lang) {\n            case 'kt':\n            case 'kotlin':\n                config = [Prism.languages.kotlin, 'kotlin']\n                break;\n\n            case 'py':\n            case 'python':\n                config = [Prism.languages.python, 'python']\n                break;\n\n            case 'ts':\n            case 'typescript':\n                config = [Prism.languages.typescript, 'typescript']\n                break;\n\n            case 'js':\n            case 'javascript':\n                config = [Prism.languages.javascript, 'javascript']\n                break;\n\n            case 'yml':\n            case 'yaml':\n                config = [Prism.languages.yaml, 'yaml']\n                break;\n\n            case 'html':\n                config = [Prism.languages.html, 'html']\n                break;\n\n            case 'xml':\n                config = [Prism.languages.xml, 'xml']\n                break;\n\n            case 'java':\n                config = [Prism.languages.java, 'java']\n                break;\n\n            case 'css':\n                config = [Prism.languages.css, 'css']\n                break;\n\n            case 'json':\n                config = [Prism.languages.json, 'json']\n                break;\n\n            case 'sql':\n                config = [Prism.languages.sql, 'sql']\n                break;\n        }\n        if (config.length === 2) {\n            content = Prism.highlight(data['content'], config[0], config[1])\n            isHighlighted = true\n        } else {\n            content = data['content']\n        }\n    });\n\n</script>\n\n<style type=\"text/scss\">pre {\n  padding: 1em;\n  background-color: #121212; }\n  pre code {\n    font-size: 1.2em; }\n\n/*# sourceMappingURL=ShowPaste.svelte.css.map */</style>\n\n\n<main class=\"show-paste\">\n    <nav class=\"navbar\">\n        <NavBar/>\n    </nav>\n\n    <pre><code>\n        {#if isHighlighted}\n            {@html content}\n        {:else}\n            {content}\n        {/if}\n    </code></pre>\n</main>\n"
  ],
  "names": [],
  "mappings": "AAQgC,IAAI,AAAE,CAAC,AACrC,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,OAAO,CACnB,WAAW,CAAE,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CACjD,sBAAsB,CAAE,WAAW,CACnC,uBAAuB,CAAE,SAAS,AAAE,CAAC,AAE/B,CAAC,AAAE,CAAC,AACV,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AAAE,CAAC,AAEP,OAAO,AAAE,CAAC,AAChB,OAAO,CAAE,IAAI,AAAE,CAAC,AACR,OAAO,AAAC,CAAC,AAAQ,QAAQ,AAAE,CAAC,AAClC,OAAO,CAAE,IAAI,CACb,GAAG,CAAE,IAAI,CACT,UAAU,CAAE,MAAM,CAClB,YAAY,CAAE,IAAI,AAAE,CAAC,AACf,OAAO,AAAC,CAAC,AAAQ,UAAU,AAAE,CAAC,AACpC,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,AAAE,CAAC,AACX,OAAO,AAAC,CAAC,AAAQ,OAAO,AAAE,CAAC,AACjC,UAAU,CAAE,WAAW,CAEvB,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAC5B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,AAAE,CAAC;ACVM,KAAK,4BAAC,CAAC,AAC7B,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AAAE,CAAC,AACzB,mBAAK,CAAC,YAAY,cAAC,CAAC,AAClB,gBAAgB,CAAE,OAAO,CACzB,WAAW,CAAE,eAAe,CAAC,CAAC,SAAS,CACvC,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,IAAI,AAAE,CAAC;AChCK,GAAG,4BAAC,CAAC,AAC3B,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,MAAM,AAAE,CAAC,AACjB,iBAAG,CAAC,KAAK,cAAC,CAAC,AACT,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,cAAc,CAAE,MAAM,AAAE,CAAC,AAC3B,iBAAG,CAAC,MAAM,cAAC,CAAC,AACV,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,MAAM,AAAE,CAAC;ACmEL,GAAG,4BAAC,CAAC,AAC3B,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,OAAO,AAAE,CAAC,AAC5B,iBAAG,CAAC,IAAI,cAAC,CAAC,AACR,SAAS,CAAE,KAAK,AAAE,CAAC"
}